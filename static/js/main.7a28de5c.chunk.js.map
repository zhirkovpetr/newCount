{"version":3,"sources":["Counters/setCount/SetInput.tsx","Counters/setCount/Inputs.tsx","Counters/ButtonClick.tsx","Counters/setCount/SetCount.tsx","Counters/count/Screen.tsx","Counters/count/CountButtons.tsx","Counters/count/Count.tsx","BLL/counter-reducer.ts","App.tsx","BLL/store.ts","reportWebVitals.ts","index.tsx"],"names":["SetInput","props","TextField","variant","type","label","value","onChange","e","number","Number","currentTarget","update","setEditMode","error","helperText","Inputs","Grid","minValue","maxValue","setError","style","margin","updateValueMax","updateValueMin","ButtonClick","container","direction","justify","alignItems","Button","onClick","updateCount","size","color","disabled","editMode","title","SetCount","marginTop","count","Screen","Box","display","displayPrint","fontSize","CountButtons","spacing","item","xs","addInc","reset","Count","textAlign","ADD_COUNT_TO_COUNTER","SET_MIN_VALUE","SET_MAX_VALUE","addCountAC","setMinValueAC","initialState","App","preloadedState","useState","dispatch","useDispatch","useSelector","state","counter","border","width","height","setMaxValueAC","action","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","persistedTodoString","localStorage","getItem","JSON","parse","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a28de5c.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype SetInputType = {\r\n    value: number\r\n    update: (minValue: number) => void\r\n    setEditMode: (EditMode: boolean) => void\r\n    error: boolean\r\n    label: string\r\n}\r\n\r\nexport function SetInput(props: SetInputType) {\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let number = Number(e.currentTarget.value)\r\n        props.update(number)\r\n        props.setEditMode(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <span>\r\n            <TextField\r\n                variant={'outlined'}\r\n                type={'number'}\r\n                label={props.label}\r\n                value={props.value}\r\n                onChange={onChange}\r\n                error={props.error}\r\n                helperText={ props.error ? 'Incorrect value entered!' : ''}\r\n            />\r\n    </span>\r\n\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {SetInput} from \"./SetInput\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\ntype InputsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    updateValueMin: (minValue: number) => void\r\n    updateValueMax: (valueMax: number) => void\r\n    setEditMode: (EditMode: boolean) => void\r\n    error: boolean\r\n    setError: (error: boolean) => void\r\n}\r\n\r\nexport function Inputs(props: InputsType) {\r\n    return (\r\n        <Grid>\r\n            {props.minValue >= props.maxValue || props.minValue < 0 || props.maxValue < 0 ? props.setError(true) : props.setError(false)}\r\n            <Grid style={{margin: '30px'}}>\r\n            <SetInput label={'Max value'} value={props.maxValue} update={props.updateValueMax}\r\n                      setEditMode={props.setEditMode} error={props.error}/> <br/>\r\n            </Grid>\r\n                <Grid style={{margin: '30px'}}>\r\n            <SetInput label={'Start value'} value={props.minValue} update={props.updateValueMin}\r\n                      setEditMode={props.setEditMode} error={props.error}/>\r\n                </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from \"react\";\r\nimport {Button, Grid} from \"@material-ui/core\";\r\n\r\ntype ButtonType = {\r\n    onClick: () => void\r\n    title: string\r\n    minValue: number\r\n    maxValue: number\r\n    editMode?: boolean\r\n    setEditMode?: (editMode: boolean) => void\r\n    count: number\r\n    error?: boolean\r\n    disabled?: boolean\r\n    updateCount?:(count: number)=> void\r\n}\r\n\r\nexport function ButtonClick(props: ButtonType) {\r\n    const onClick = () => {\r\n        props.onClick();\r\n        props.setEditMode && props.setEditMode(false);\r\n        if (props.updateCount && props.minValue) {\r\n            props.updateCount(props.minValue)\r\n        }\r\n    }\r\n    return (\r\n        <Grid\r\n            container\r\n            direction=\"row-reverse\"\r\n            justify=\"center\"\r\n            alignItems=\"flex-start\"\r\n        >\r\n            <Button onClick={onClick} size={'small'} color={'primary'} variant={'contained'}\r\n                disabled={props.disabled || props.maxValue === props.minValue || props.editMode || props.error}>{props.title}</Button>\r\n        </Grid>\r\n    )\r\n}","import {Inputs} from \"./Inputs\";\r\nimport {ButtonClick} from \"../ButtonClick\";\r\nimport React from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\n\r\ntype SetCountType = {\r\n    minValue: number\r\n    maxValue: number\r\n    updateValueMin: (value: number) => void\r\n    updateValueMax: (valueMax: number) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    count: number\r\n    error: boolean\r\n    setError: (error: boolean) => void\r\n    updateCount: (count: number) => void\r\n\r\n\r\n}\r\n\r\nexport const SetCount = (props: SetCountType) => {\r\n\r\n    const onClickHandler = () => {\r\n        if (props.updateCount) {\r\n            props.updateCount(props.count)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid>\r\n                <Inputs minValue={props.minValue} maxValue={props.maxValue} updateValueMin={props.updateValueMin}\r\n                        updateValueMax={props.updateValueMax}\r\n                        setEditMode={props.setEditMode} error={props.error} setError={props.setError}/>\r\n            </Grid>\r\n            <Grid style={{marginTop: '10px'}}>\r\n\r\n                <ButtonClick title={'set'} minValue={props.minValue} maxValue={props.maxValue} onClick={onClickHandler}\r\n                             setEditMode={props.setEditMode} count={props.count} error={props.error}\r\n                             updateCount={props.updateCount}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from \"react\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\ntype screenType = {\r\n    count: number\r\n    maxValue: number\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport function Screen(props: screenType) {\r\n    return (\r\n        <div>\r\n            <Box display=\"block\" displayPrint=\"none\" style={{fontSize: '30px'}}>\r\n                {props.error ? <Box style={{color: 'red'}}> error </Box> : props.editMode ? <Box>settings</Box> :\r\n                    props.count === props.maxValue? <Box style={{color: 'red'}}> {props.count}</Box> :\r\n                            <Box>{props.count}</Box>}\r\n\r\n            </Box>\r\n        </div>\r\n    )\r\n}","import {ButtonClick} from \"../ButtonClick\";\r\nimport React from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\ntype CountButtonsType = {\r\n    addInc: () => void\r\n    reset: () => void\r\n    minValue: number\r\n    maxValue: number\r\n    editMode: boolean\r\n    count: number\r\n}\r\n\r\nexport const CountButtons = (props: CountButtonsType) => {\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs>\r\n            <ButtonClick onClick={props.addInc} title='inc' minValue={props.minValue} maxValue={props.maxValue}\r\n                         editMode={props.editMode} count={props.count} disabled={props.maxValue === props.count}\r\n                         />\r\n            </Grid>\r\n                <Grid item xs>\r\n            <ButtonClick onClick={props.reset} title='reset' minValue={props.minValue} maxValue={props.maxValue}\r\n                         editMode={props.editMode} count={props.count} disabled={props.minValue === props.count}\r\n                         />\r\n                </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from \"react\";\r\nimport {Screen} from \"./Screen\";\r\nimport {CountButtons} from \"./CountButtons\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\ntype CountType = {\r\n    addInc: () => void\r\n    reset: () => void\r\n    minValue: number\r\n    maxValue: number\r\n    editMode: boolean\r\n    count: number\r\n    error: boolean\r\n}\r\n\r\nexport const Count = (props: CountType) => {\r\n    return (\r\n        <Grid>\r\n            <Grid style={{textAlign: 'center'}}>\r\n                <Screen count={props.count} maxValue={props.maxValue} editMode={props.editMode}\r\n                        error={props.error} />\r\n            </Grid>\r\n            <Grid style={{marginTop: '5px'}}>\r\n                <CountButtons addInc={props.addInc} reset={props.reset} minValue={props.minValue} maxValue={props.maxValue}\r\n                              editMode={props.editMode}\r\n                              count={props.count}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","const ADD_COUNT_TO_COUNTER = \"ADD_COUNT_TO_COUNTER\";\r\nconst SET_MIN_VALUE = \"SET_MIN_VALUE\";\r\nconst SET_MAX_VALUE = \"SET_MAX_VALUE\";\r\n\r\nexport const addCountAC = (count: number) => {\r\n    return {\r\n        type: ADD_COUNT_TO_COUNTER,\r\n        count: count\r\n    } as const\r\n}\r\n\r\nexport const setMinValueAC = (minValue: number) => {\r\n    return {\r\n        type: SET_MIN_VALUE,\r\n        minValue: minValue\r\n    } as const\r\n}\r\n\r\nexport const setMaxValueAC = (maxValue: number) => {\r\n    return {\r\n        type: SET_MAX_VALUE,\r\n        maxValue: maxValue\r\n    } as const\r\n}\r\n\r\n\r\ntype addCountActionType = ReturnType<typeof addCountAC>\r\ntype setMinValueActionType = ReturnType<typeof setMinValueAC>\r\ntype setMaxValueActionType = ReturnType<typeof setMaxValueAC>\r\n\r\nexport type ActionsTypes = addCountActionType | setMinValueActionType | setMaxValueActionType\r\n\r\n\r\nconst initialState = {\r\n    count: 0,\r\n    minValue: 0,\r\n    maxValue: 100\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\n\r\nexport const counterReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_COUNT_TO_COUNTER:\r\n            return {\r\n                ...state,\r\n                count: action.count\r\n\r\n            }\r\n        case SET_MIN_VALUE:\r\n            return {\r\n                ...state,\r\n                minValue: action.minValue\r\n            }\r\n        case SET_MAX_VALUE:\r\n            return {\r\n                ...state,\r\n                maxValue: action.maxValue\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport {SetCount} from \"./Counters/setCount/SetCount\";\nimport {Count} from \"./Counters/count/Count\";\nimport {Grid} from \"@material-ui/core\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"./BLL/store\";\nimport {addCountAC, setMinValueAC, setMaxValueAC} from \"./BLL/counter-reducer\";\n\n\nfunction App() {\n\n    /*let [value, setValue] = useState<number>(0);\n    let [valueMax, setValueMax] = useState<number>(0);*/\n\n\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [error, setError] = useState<boolean>(false);\n\n    const dispatch = useDispatch()\n    let count = useSelector<AppStateType, number>(\n        state => state.counter.count)\n    let maxValue = useSelector<AppStateType, number>(\n        state => state.counter.maxValue)\n    let minValue = useSelector<AppStateType, number>(\n        state => state.counter.minValue)\n\n    /*const setItemValue = () => {\n        localStorage.setItem('value', JSON.stringify(value))\n        localStorage.setItem('valueMax', JSON.stringify(valueMax))\n    }\n\n    useEffect(() => {\n            let valueAsString = localStorage.getItem('value')\n            if (valueAsString) {\n                let newValue = JSON.parse(valueAsString)\n                setValue(newValue)\n            }\n        }\n        , [])\n\n    useEffect(() => {\n            let valueAsString = localStorage.getItem('valueMax')\n            if (valueAsString) {\n                let newValue = JSON.parse(valueAsString)\n                setValueMax(newValue)\n            }\n        }\n        , [])\n*/\n    const updateValueMin = (minValue: number) => {\n        dispatch(setMinValueAC(minValue))\n    }\n\n    const updateValueMax = (maxValue: number) => {\n        dispatch(setMaxValueAC(maxValue))\n    }\n\n    const updateCount = (count: number) => {\n        dispatch(addCountAC(count))\n    }\n\n    /*let [count, setCount] = useState<number>(value)\n\n    useEffect(() => {//timer\n        let countString = localStorage.getItem(\"Count\")\n        if (countString) {\n            let countNumber = JSON.parse(countString)\n            setCount(countNumber)\n        }\n    }, [])\n\n    useEffect(() => {//timer\n        localStorage.setItem(\"Count\", JSON.stringify(value));\n    }, [value])\n\n*/\n\n\n    const addInc = () => {\n        let action = addCountAC( count+1)\n        dispatch(action)\n        /*let res = count + 1\n        if (res <= valueMax) {\n            setCount(res)\n        }*/\n\n    }\n\n    const reset = () => {\n        let action = setMinValueAC(minValue)\n        dispatch(action)\n        /*setCount(value);*/\n    }\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Grid container justify=\"center\" spacing={2}\n                      style={{margin: '20px auto', border: '1px solid #3f51b5', width: '230px', height: '300px'}}>\n                        <SetCount minValue={minValue} maxValue={maxValue} updateValueMin={updateValueMin}\n                                  updateValueMax={updateValueMax}\n                                  error={error} setError={setError} count={count}\n                                  setEditMode={setEditMode} updateCount={updateCount}/>\n                </Grid>\n                <Grid container justify=\"center\" spacing={2}\n                      style={{margin: '20px auto', border: '1px solid #3f51b5', width: '230px', height: '100px'}}>\n                    <Count addInc={addInc} reset={reset} minValue={minValue} maxValue={maxValue} editMode={editMode}\n                               count={count} error={error} />\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default App;\n","import {combineReducers, createStore} from 'redux'\r\nimport {counterReducer} from \"./counter-reducer\";\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer> //типизация стейта всего приложения\r\n\r\nlet rootReducer = combineReducers({\r\n    counter: counterReducer\r\n});\r\n\r\nexport type AppStoreType = typeof store\r\n\r\nlet preloadedState;\r\nconst persistedTodoString= localStorage.getItem('app-state')\r\nif(persistedTodoString){\r\n    preloadedState= JSON.parse(persistedTodoString)\r\n}\r\n\r\nexport let store = createStore(rootReducer, preloadedState)\r\n\r\nstore.subscribe(() => {\r\n    localStorage.setItem('app-state', JSON.stringify(store.getState()))\r\n})","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./BLL/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}