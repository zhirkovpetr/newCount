{"version":3,"sources":["Counters/setCount/SetInput.tsx","Counters/setCount/Inputs.tsx","Counters/Button.tsx","Counters/setCount/SetCount.tsx","Counters/count/Screen.tsx","Counters/count/CountButtons.tsx","Counters/count/Count.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SetInput","props","title","TextField","variant","type","value","onChange","e","number","Number","currentTarget","update","setEditMode","error","helperText","Inputs","valueMax","setError","updateValueMax","updateValue","Button","onClick","setCount","disabled","editMode","SetCount","setItemValue","Screen","count","CountButtons","addInc","reset","Count","App","useState","setValue","setValueMax","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","countString","countNumber","setItem","stringify","res","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.970eb223.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype SetInputType = {\r\n    title: string\r\n    value: number\r\n    update: (value: number) => void\r\n    setEditMode: (EditMode: boolean) => void\r\n    error: boolean\r\n}\r\n\r\nexport function SetInput(props: SetInputType) {\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let number = Number(e.currentTarget.value)\r\n        props.update(number)\r\n        props.setEditMode(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <span>\r\n             {props.title}\r\n            <TextField\r\n                variant={'outlined'}\r\n                type={'number'}\r\n                value={props.value}\r\n                onChange={onChange}\r\n                error={props.error}\r\n                helperText={'Incorrect value entered!'}\r\n            />\r\n    </span>\r\n\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {SetInput} from \"./SetInput\";\r\n\r\ntype InputsType = {\r\n    value: number\r\n    valueMax: number\r\n    updateValue: (value: number) => void\r\n    updateValueMax: (valueMax: number) => void\r\n    setEditMode: (EditMode: boolean) => void\r\n    error: boolean\r\n    setError: (error: boolean) => void\r\n}\r\n\r\nexport function Inputs(props: InputsType) {\r\n    return (\r\n        <div>\r\n            {props.value >= props.valueMax || props.value < 0 || props.valueMax < 0 ? props.setError(true) : props.setError(false)}\r\n            <SetInput title={'max value: '} value={props.valueMax} update={props.updateValueMax}\r\n                      setEditMode={props.setEditMode} error={props.error}/> <br/>\r\n            <SetInput title={'start value: '} value={props.value} update={props.updateValue}\r\n                      setEditMode={props.setEditMode} error={props.error}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype ButtonType = {\r\n    onClick: () => void\r\n    title: string\r\n    value: number\r\n    valueMax: number\r\n    editMode?: boolean\r\n    setEditMode?: (editMode: boolean) => void\r\n    count?: number\r\n    setCount?: (count: number) => void\r\n    error?: boolean\r\n}\r\n\r\nexport function Button(props: ButtonType) {\r\n    const onClick = () => {\r\n        props.onClick();\r\n        props.setEditMode && props.setEditMode(false);\r\n        if (props.setCount && props.value) {\r\n            props.setCount(props.value)\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={onClick}\r\n                    disabled={props.valueMax === props.value || props.editMode || props.error}>{props.title}</button>\r\n        </div>\r\n    )\r\n}","import {Inputs} from \"./Inputs\";\r\nimport {Button} from \"../Button\";\r\nimport React from \"react\";\r\n\r\ntype SetCountType = {\r\n    setItemValue: () => void\r\n    value: number\r\n    valueMax: number\r\n    updateValue: (value: number) => void\r\n    updateValueMax: (valueMax: number) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    setCount?: (count: number) => void\r\n    error: boolean\r\n    setError: (error: boolean) => void\r\n}\r\n\r\nexport const SetCount = (props: SetCountType) => {\r\n    return (\r\n        <div>\r\n            <Inputs value={props.value} valueMax={props.valueMax} updateValue={props.updateValue}\r\n                    updateValueMax={props.updateValueMax}\r\n                    setEditMode={props.setEditMode} error={props.error} setError={props.setError}/>\r\n            <Button onClick={props.setItemValue} title={'set'} value={props.value} valueMax={props.valueMax}\r\n                    setEditMode={props.setEditMode} setCount={props.setCount} error={props.error}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\ntype screenType = {\r\n    value: number\r\n    count: number\r\n    valueMax: number\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport function Screen(props: screenType) {\r\n    return (\r\n        <div>\r\n            {props.error? <span>error</span> : props.editMode ? <span>settings</span> : <span> {props.count}</span>}\r\n        </div>\r\n    )\r\n}","import {Button} from \"../Button\";\r\nimport React from \"react\";\r\n\r\ntype CountButtonsType = {\r\n    addInc: () => void\r\n    reset: () => void\r\n    value: number\r\n    valueMax: number\r\n    editMode: boolean\r\n    count: number\r\n}\r\n\r\nexport const CountButtons = (props: CountButtonsType) => {\r\n    return (\r\n        <div>\r\n            <Button onClick={props.addInc} title='inc' value={props.value} valueMax={props.valueMax}\r\n                    editMode={props.editMode} count={props.count}/>\r\n            <Button onClick={props.reset} title='reset' value={props.value} valueMax={props.valueMax}\r\n                    editMode={props.editMode} count={props.count}/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Screen} from \"./Screen\";\r\nimport {CountButtons} from \"./CountButtons\";\r\n\r\ntype CountType = {\r\n    addInc: () => void\r\n    reset: () => void\r\n    value: number\r\n    valueMax: number\r\n    editMode: boolean\r\n    count: number\r\n    error: boolean\r\n}\r\n\r\nexport const Count = (props: CountType) => {\r\n    return (\r\n        <div>\r\n            <Screen count={props.count} value={props.value} valueMax={props.valueMax} editMode={props.editMode}\r\n                    error={props.error}/>\r\n            <CountButtons addInc={props.addInc} reset={props.reset} value={props.value} valueMax={props.valueMax}\r\n                          editMode={props.editMode}\r\n                          count={props.count}/>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {SetCount} from \"./Counters/setCount/SetCount\";\nimport {Count} from \"./Counters/count/Count\";\n\n\nfunction App() {\n\n    let [value, setValue] = useState<number>(0);\n    let [valueMax, setValueMax] = useState<number>(0);\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [error, setError] = useState<boolean>(false);\n\n\n    const setItemValue = () => {\n        localStorage.setItem('value', JSON.stringify(value))\n        localStorage.setItem('valueMax', JSON.stringify(valueMax))\n    }\n\n    useEffect(() => {\n            let valueAsString = localStorage.getItem('value')\n            if (valueAsString) {\n                let newValue = JSON.parse(valueAsString)\n                setValue(newValue)\n            }\n        }\n        , [])\n\n    useEffect(() => {\n            let valueAsString = localStorage.getItem('valueMax')\n            if (valueAsString) {\n                let newValue = JSON.parse(valueAsString)\n                setValueMax(newValue)\n            }\n        }\n        , [])\n\n    const updateValue = (value: number) => {\n        setValue(value)\n    }\n\n    const updateValueMax = (valueMax: number) => {\n        setValueMax(valueMax)\n    }\n\n    let [count, setCount] = useState<number>(value)\n\n    useEffect(() => {//timer\n        let countString = localStorage.getItem(\"Count\")\n        if (countString) {\n            let countNumber = JSON.parse(countString)\n            setCount(countNumber)\n        }\n    }, [])\n\n    useEffect(() => {//timer\n        localStorage.setItem(\"Count\", JSON.stringify(value));\n    }, [value])\n\n\n    const addInc = () => {\n        let res = count + 1\n        if (res <= valueMax) {\n            setCount(res)\n        }\n    }\n\n    const reset = () => {\n        setCount(value);\n    }\n\n    return (\n        <div>\n            <SetCount value={value} valueMax={valueMax} updateValue={updateValue} updateValueMax={updateValueMax}\n                      error={error} setError={setError} setCount={setCount} setItemValue={setItemValue}\n                      setEditMode={setEditMode}/>\n\n            <Count addInc={addInc} reset={reset} value={value} valueMax={valueMax} editMode={editMode}\n                   count={count} error={error}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}