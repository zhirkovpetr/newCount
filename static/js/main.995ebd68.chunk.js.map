{"version":3,"sources":["Counters/setCount/SetInput.tsx","Counters/setCount/Inputs.tsx","Counters/ButtonClick.tsx","Counters/setCount/SetCount.tsx","Counters/count/Screen.tsx","Counters/count/CountButtons.tsx","Counters/count/Count.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SetInput","props","TextField","variant","type","label","value","onChange","e","number","Number","currentTarget","update","setEditMode","error","helperText","Inputs","Grid","valueMax","setError","style","margin","updateValueMax","updateValue","ButtonClick","container","direction","justify","alignItems","Button","onClick","setCount","size","color","disabled","editMode","title","SetCount","marginTop","setItemValue","Screen","Box","display","displayPrint","fontSize","count","CountButtons","spacing","item","xs","addInc","reset","Count","textAlign","App","useState","setValue","setValueMax","useEffect","valueAsString","localStorage","getItem","newValue","JSON","parse","countString","countNumber","setItem","stringify","border","width","height","res","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.995ebd68.chunk.js","sourcesContent":["import React, {ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype SetInputType = {\r\n    value: number\r\n    update: (value: number) => void\r\n    setEditMode: (EditMode: boolean) => void\r\n    error: boolean\r\n    label: string\r\n}\r\n\r\nexport function SetInput(props: SetInputType) {\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let number = Number(e.currentTarget.value)\r\n        props.update(number)\r\n        props.setEditMode(true)\r\n    }\r\n\r\n\r\n    return (\r\n        <span>\r\n            <TextField\r\n                variant={'outlined'}\r\n                type={'number'}\r\n                label={props.label}\r\n                value={props.value}\r\n                onChange={onChange}\r\n                error={props.error}\r\n                helperText={ props.error ? 'Incorrect value entered!' : ''}\r\n            />\r\n    </span>\r\n\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {SetInput} from \"./SetInput\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\ntype InputsType = {\r\n    value: number\r\n    valueMax: number\r\n    updateValue: (value: number) => void\r\n    updateValueMax: (valueMax: number) => void\r\n    setEditMode: (EditMode: boolean) => void\r\n    error: boolean\r\n    setError: (error: boolean) => void\r\n}\r\n\r\nexport function Inputs(props: InputsType) {\r\n    return (\r\n        <Grid>\r\n            {props.value >= props.valueMax || props.value < 0 || props.valueMax < 0 ? props.setError(true) : props.setError(false)}\r\n            <Grid style={{margin: '30px'}}>\r\n            <SetInput label={'Max value'} value={props.valueMax} update={props.updateValueMax}\r\n                      setEditMode={props.setEditMode} error={props.error}/> <br/>\r\n            </Grid>\r\n                <Grid style={{margin: '30px'}}>\r\n            <SetInput label={'Start value'} value={props.value} update={props.updateValue}\r\n                      setEditMode={props.setEditMode} error={props.error}/>\r\n                </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from \"react\";\r\nimport {Button, Grid} from \"@material-ui/core\";\r\n\r\ntype ButtonType = {\r\n    onClick: () => void\r\n    title: string\r\n    value: number\r\n    valueMax: number\r\n    editMode?: boolean\r\n    setEditMode?: (editMode: boolean) => void\r\n    count?: number\r\n    setCount?: (count: number) => void\r\n    error?: boolean\r\n}\r\n\r\nexport function ButtonClick(props: ButtonType) {\r\n    const onClick = () => {\r\n        props.onClick();\r\n        props.setEditMode && props.setEditMode(false);\r\n        if (props.setCount && props.value) {\r\n            props.setCount(props.value)\r\n        }\r\n    }\r\n    return (\r\n        <Grid\r\n            container\r\n            direction=\"row-reverse\"\r\n            justify=\"center\"\r\n            alignItems=\"flex-start\"\r\n        >\r\n            <Button onClick={onClick} size={'small'} color={'primary'} variant={'contained'}\r\n                    disabled={props.valueMax === props.value || props.editMode || props.error}>{props.title}</Button>\r\n        </Grid>\r\n    )\r\n}","import {Inputs} from \"./Inputs\";\r\nimport {ButtonClick} from \"../ButtonClick\";\r\nimport React from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\n\r\ntype SetCountType = {\r\n    setItemValue: () => void\r\n    value: number\r\n    valueMax: number\r\n    updateValue: (value: number) => void\r\n    updateValueMax: (valueMax: number) => void\r\n    setEditMode: (editMode: boolean) => void\r\n    setCount?: (count: number) => void\r\n    error: boolean\r\n    setError: (error: boolean) => void\r\n}\r\n\r\nexport const SetCount = (props: SetCountType) => {\r\n    return (\r\n        <Grid>\r\n            <Grid >\r\n                <Inputs value={props.value} valueMax={props.valueMax} updateValue={props.updateValue}\r\n                        updateValueMax={props.updateValueMax}\r\n                        setEditMode={props.setEditMode} error={props.error} setError={props.setError}/>\r\n            </Grid>\r\n            <Grid style={{marginTop: '10px'}}>\r\n\r\n                <ButtonClick onClick={props.setItemValue} title={'set'} value={props.value} valueMax={props.valueMax}\r\n                             setEditMode={props.setEditMode} setCount={props.setCount} error={props.error}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from \"react\";\r\nimport {Box} from \"@material-ui/core\";\r\n\r\ntype screenType = {\r\n    value: number\r\n    count: number\r\n    valueMax: number\r\n    editMode: boolean\r\n    error: boolean\r\n}\r\n\r\nexport function Screen(props: screenType) {\r\n    return (\r\n        <div>\r\n            <Box display=\"block\" displayPrint=\"none\" style={{fontSize: '30px'}}>\r\n                {props.error ? <Box style={{color: 'red'}}> error </Box> : props.editMode ? <Box>settings</Box> :\r\n                    <Box> {props.count}</Box>}\r\n            </Box>\r\n        </div>\r\n    )\r\n}","import {ButtonClick} from \"../ButtonClick\";\r\nimport React from \"react\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\ntype CountButtonsType = {\r\n    addInc: () => void\r\n    reset: () => void\r\n    value: number\r\n    valueMax: number\r\n    editMode: boolean\r\n    count: number\r\n}\r\n\r\nexport const CountButtons = (props: CountButtonsType) => {\r\n    return (\r\n        <Grid container spacing={3}>\r\n            <Grid item xs>\r\n            <ButtonClick onClick={props.addInc} title='inc' value={props.value} valueMax={props.valueMax}\r\n                         editMode={props.editMode} count={props.count}/>\r\n            </Grid>\r\n                <Grid item xs>\r\n            <ButtonClick onClick={props.reset} title='reset' value={props.value} valueMax={props.valueMax}\r\n                         editMode={props.editMode} count={props.count}/>\r\n                </Grid>\r\n        </Grid>\r\n    )\r\n}","import React from \"react\";\r\nimport {Screen} from \"./Screen\";\r\nimport {CountButtons} from \"./CountButtons\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\ntype CountType = {\r\n    addInc: () => void\r\n    reset: () => void\r\n    value: number\r\n    valueMax: number\r\n    editMode: boolean\r\n    count: number\r\n    error: boolean\r\n}\r\n\r\nexport const Count = (props: CountType) => {\r\n    return (\r\n        <Grid>\r\n            <Grid style={{textAlign: 'center'}}>\r\n                <Screen count={props.count} value={props.value} valueMax={props.valueMax} editMode={props.editMode}\r\n                        error={props.error} />\r\n            </Grid>\r\n            <Grid style={{marginTop: '5px'}}>\r\n                <CountButtons addInc={props.addInc} reset={props.reset} value={props.value} valueMax={props.valueMax}\r\n                              editMode={props.editMode}\r\n                              count={props.count}/>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {SetCount} from \"./Counters/setCount/SetCount\";\nimport {Count} from \"./Counters/count/Count\";\nimport {Grid} from \"@material-ui/core\";\n\n\nfunction App() {\n\n    let [value, setValue] = useState<number>(0);\n    let [valueMax, setValueMax] = useState<number>(0);\n    let [editMode, setEditMode] = useState<boolean>(false)\n    let [error, setError] = useState<boolean>(false);\n\n\n    const setItemValue = () => {\n        localStorage.setItem('value', JSON.stringify(value))\n        localStorage.setItem('valueMax', JSON.stringify(valueMax))\n    }\n\n    useEffect(() => {\n            let valueAsString = localStorage.getItem('value')\n            if (valueAsString) {\n                let newValue = JSON.parse(valueAsString)\n                setValue(newValue)\n            }\n        }\n        , [])\n\n    useEffect(() => {\n            let valueAsString = localStorage.getItem('valueMax')\n            if (valueAsString) {\n                let newValue = JSON.parse(valueAsString)\n                setValueMax(newValue)\n            }\n        }\n        , [])\n\n    const updateValue = (value: number) => {\n        setValue(value)\n    }\n\n    const updateValueMax = (valueMax: number) => {\n        setValueMax(valueMax)\n    }\n\n    let [count, setCount] = useState<number>(value)\n\n    useEffect(() => {//timer\n        let countString = localStorage.getItem(\"Count\")\n        if (countString) {\n            let countNumber = JSON.parse(countString)\n            setCount(countNumber)\n        }\n    }, [])\n\n    useEffect(() => {//timer\n        localStorage.setItem(\"Count\", JSON.stringify(value));\n    }, [value])\n\n\n    const addInc = () => {\n        let res = count + 1\n        if (res <= valueMax) {\n            setCount(res)\n        }\n    }\n\n    const reset = () => {\n        setCount(value);\n    }\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12}>\n                <Grid container justify=\"center\" spacing={2}\n                      style={{margin: '20px auto', border: '1px solid #3f51b5', width: '230px', height: '300px'}}>\n                        <SetCount value={value} valueMax={valueMax} updateValue={updateValue}\n                                  updateValueMax={updateValueMax}\n                                  error={error} setError={setError} setCount={setCount} setItemValue={setItemValue}\n                                  setEditMode={setEditMode}/>\n                </Grid>\n                <Grid container justify=\"center\" spacing={2}\n                      style={{margin: '20px auto', border: '1px solid #3f51b5', width: '230px', height: '100px'}}>\n                        <Count addInc={addInc} reset={reset} value={value} valueMax={valueMax} editMode={editMode}\n                               count={count} error={error}/>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}